Yes, Django signals run in the same thread as the caller by default. This means that when a signal is sent, 
the connected signal handlers are executed in the same thread as the signal sender, 
and the sender will wait for all handlers to complete before continuing its execution


#Code:

import threading
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

# Signal handler
@receiver(post_save, sender=User)
def my_handler(sender, **kwargs):
    print(f"Signal received in thread: {threading.current_thread().name}")

# Simulate saving a user
user = User(username='testuser')
print(f"Saving user in thread: {threading.current_thread().name}")
user.save()


